#include <gtest/gtest.h>

#include "PmergeMe.hpp"

// ---------- template function ---------- //

template<typename Container>
Container returnSortedSeq(const Container &seq) {
	Container sortedSeq(seq);
	std::sort(sortedSeq.begin(), sortedSeq.end());
	return sortedSeq;
}

template<typename Container>
void validateSortable(Container input) {
	const Container &expect = returnSortedSeq(input);
	const Container &actual = mergeInsertionSort(input);
	EXPECT_EQ(expect, actual);
}

// ---------- test macro ---------- //

TEST(LoadTest, _50Kinds) {
	validateSortable(std::vector<int>{221,22745,51175,26521,95921,75666,82754,41158,77142,59639,12234,51406,50233,47105,34305,69450,77838,96334,64166,66711,95294,81062,66387,5698,88813,61810,5584,25369,4393,56635,10583,20064,20733,97452,70975,74896,75460,86458,38542,81032,48637,14911,28191,681,58992,27971,52967,97684,86724,89645});
}

TEST(LoadTest, _60Kinds) {
	validateSortable(std::vector<int>{17141,70351,97430,82353,23067,53610,98985,63263,14761,87796,33358,98055,83971,62092,26742,89167,3513,7864,62364,98755,79605,15875,12565,98136,35576,2477,63413,52330,8627,98767,49141,65926,4403,13123,33994,29829,48714,35409,18001,11563,15851,93044,18922,47588,32402,34739,71519,35431,15863,75761,39320,8861,47340,6316,25566,3470,56806,43722,55014,56547});
}

TEST(LoadTest, _70Kinds) {
	validateSortable(std::vector<int>{56476,98756,27387,29322,13993,27771,46768,11125,17588,84839,91828,18318,60610,17241,84973,39600,2747,76752,36120,87052,62445,76003,71179,91729,34580,40958,38696,19200,95601,5721,20582,48516,48572,44567,36680,15486,25320,71469,31730,28533,72177,26857,60694,33586,58851,30689,7803,52772,59533,75801,80240,29822,36603,62152,70597,94369,49756,22287,6783,37884,42048,63527,36348,22869,30539,25745,68424,89539,8159,93141});
}

TEST(LoadTest, _80Kinds) {
	validateSortable(std::vector<int>{81842,40412,64008,74921,7455,94415,10780,98214,48600,16496,74452,45074,71470,11103,16913,39245,17889,809,71377,9980,87266,51319,29684,6766,7230,3553,93958,68010,79865,49089,9152,89393,47020,65320,77186,14994,351,33695,24912,13084,39279,53514,24714,90353,56815,93054,16063,48970,62164,49090,51165,34424,8789,6171,81727,29413,50715,95662,61661,34143,7026,9568,8679,8036,74279,95045,10698,69822,76227,72323,64031,53376,18859,38283,52771,30193,51622,84401,53881,35426});
}

TEST(LoadTest, _90Kinds) {
	validateSortable(std::vector<int>{77089,43717,17747,72218,70790,87700,65464,88615,27101,46874,61465,59003,89377,8493,92146,37929,94636,15331,94086,43486,61792,50377,91639,8085,46914,5068,27372,81959,46111,37525,29656,51214,74422,3224,56604,82527,9610,89710,11978,94894,32045,59124,65054,17227,72920,25225,8980,68823,82600,21415,82960,54773,78091,14657,37882,81637,56121,35434,91431,19154,65041,54864,10215,63008,9168,18242,16648,22865,9305,10484,85470,20104,91992,73946,33975,36290,13033,6280,10956,77490,35985,28631,37437,84788,66504,75902,95660,99678,22028,20730});
}

// TEST(LoadTest, _100Kinds) {
// 	validateSortable(std::vector<int>{22407,81301,15270,59291,64509,2448,99554,51619,78571,10381,5578,1585,21522,97672,58713,8551,7503,66703,93241,23212,73276,20023,20503,8004,90605,62599,71223,51428,31242,23251,97011,80138,33177,94676,20334,24184,24333,7769,63181,46985,27217,94169,26882,20946,64950,5562,49746,7837,61860,31613,61418,13201,72954,21611,53439,78242,28682,86002,90079,83150,5968,90277,20403,12558,78820,49838,33349,95586,30665,57163,664,14612,70404,66306,174,70115,46317,82761,86176,38754,4026,7658,52079,52851,57883,27602,95263,41565,16379,39765,38336,92469,50722,35170,88985,73639,19526,60023,68023,81139});
// }
